
E1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000021e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000868  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a7  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cf  00000000  00000000  000011cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011f  00000000  00000000  0000192e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
#include "ADC.h"

volatile uint16_t pot_value = 0;

ISR(TIMER1_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
    ADCSRA |= (1 << ADSC);
}

static inline void ADC_enableInt()
{
    ADCSRA |= (1<<ADIE);
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	80 83       	st	Z, r24
    ADCSRA &= ~(1<<ADIE);
}

static inline void ADC_START()
{
	ADCSRA |= (1<<ADSC);
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADC_enableInt();
	ADC_START();
}
  b0:	ff 91       	pop	r31
  b2:	ef 91       	pop	r30
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_21>:

ISR(ADC_vect)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	pot_value = ADC;
  d2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  d6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
{
    ADCSRA |= (1<<ADIE);
}
static inline void ADC_disableInt()
{
    ADCSRA &= ~(1<<ADIE);
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	87 7f       	andi	r24, 0xF7	; 247
  ea:	80 83       	st	Z, r24
	ADC_disableInt();
}
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <main>:

int main(void)
{
	DDRB |= (1<<DDB0) | (1<<DDB1);
  fe:	84 b1       	in	r24, 0x04	; 4
 100:	83 60       	ori	r24, 0x03	; 3
 102:	84 b9       	out	0x04, r24	; 4
#ifndef ADC_H_
#define ADC_H_

static inline void init_ADC(uint8_t VREF, uint8_t ALIGN, uint8_t PRESCALER)
{
    ADMUX &= (0b00110000); //DELETE
 104:	ec e7       	ldi	r30, 0x7C	; 124
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 73       	andi	r24, 0x30	; 48
 10c:	80 83       	st	Z, r24
    ADMUX |= (VREF << REFS0); // AVCC
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
    ADMUX |= (ALIGN << ADLAR); //ALIGNMENT
 114:	80 81       	ld	r24, Z
 116:	80 83       	st	Z, r24
    ADCSRA &= (0b00000000);
 118:	aa e7       	ldi	r26, 0x7A	; 122
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	8c 91       	ld	r24, X
 11e:	1c 92       	st	X, r1
    ADCSRA |= (PRESCALER << ADPS0); //PRESCALER 125KHz
 120:	8c 91       	ld	r24, X
 122:	87 60       	ori	r24, 0x07	; 7
 124:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADEN); //ENABLE ADEN
 126:	8c 91       	ld	r24, X
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	8c 93       	st	X, r24
}
static inline void ADC_select_channel(uint16_t channel)
{
    ADMUX &= (0b11110000);
 12c:	80 81       	ld	r24, Z
 12e:	80 7f       	andi	r24, 0xF0	; 240
 130:	80 83       	st	Z, r24
    ADMUX |= (channel << MUX0);
 132:	80 81       	ld	r24, Z
 134:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADSC);
 136:	8c 91       	ld	r24, X
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	8c 93       	st	X, r24
#define DIV_CLK_256		4
#define DIV_CLK_1024	5

static inline void TMR1_CTC_Init()
{
	TCCR1B |= (1<<WGM12);
 13c:	e1 e8       	ldi	r30, 0x81	; 129
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	88 60       	ori	r24, 0x08	; 8
 144:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10) & (~(1<<WGM11));
 146:	a0 e8       	ldi	r26, 0x80	; 128
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	8c 91       	ld	r24, X
 14c:	8c 7f       	andi	r24, 0xFC	; 252
 14e:	8c 93       	st	X, r24
	TCCR1B &= ~(1<<WGM13);
 150:	80 81       	ld	r24, Z
 152:	8f 7e       	andi	r24, 0xEF	; 239
 154:	80 83       	st	Z, r24
	TCCR1B &= 0b11111000;
}

static inline void TMR1_CTC_Set(uint16_t valueCounterA)
{
	OCR1A = valueCounterA;
 156:	85 e8       	ldi	r24, 0x85	; 133
 158:	9e e1       	ldi	r25, 0x1E	; 30
 15a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 15e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCCR1B &= ~(1<<WGM13);
}

static inline void TMR1_CTC_enaInterrupt()
{
	TIMSK1 |= (1<<OCIE1A);
 162:	cf e6       	ldi	r28, 0x6F	; 111
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	88 81       	ld	r24, Y
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	88 83       	st	Y, r24
	OCR1A = valueCounterA;
}

static inline void TMR1_HW_toggleOC1A()
{
	DDRB |= (1<<DDB1);
 16c:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A |= (1<<COM1A0);
 16e:	8c 91       	ld	r24, X
 170:	80 64       	ori	r24, 0x40	; 64
 172:	8c 93       	st	X, r24
	TCCR1A &= ~(1<<COM1A1);
 174:	8c 91       	ld	r24, X
 176:	8f 77       	andi	r24, 0x7F	; 127
 178:	8c 93       	st	X, r24
	TMR1_CTC_Init();
	TMR1_CTC_Set(7813); //~=500 ms
	TMR1_CTC_enaInterrupt();
	TMR1_HW_toggleOC1A();
	
	sei();
 17a:	78 94       	sei
	TIMSK1 &= ~(1<<OCIE1A);
}

static inline void TMR1_CTC_Start(uint8_t divClock)
{
	TCNT1 = 0;
 17c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 180:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TCCR1B &= 0b11111000;
 184:	80 81       	ld	r24, Z
 186:	88 7f       	andi	r24, 0xF8	; 248
 188:	80 83       	st	Z, r24
	TCCR1B |= (divClock<<CS10);
 18a:	80 81       	ld	r24, Z
 18c:	85 60       	ori	r24, 0x05	; 5
 18e:	80 83       	st	Z, r24
	
	TMR1_CTC_Start(DIV_CLK_1024);
	
	while (1)
	{
		if(pot_value > 512)
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 194:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	92 40       	sbci	r25, 0x02	; 2
 19c:	10 f0       	brcs	.+4      	; 0x1a2 <main+0xa4>
		PORTB |= (1<<PORTB0);
 19e:	28 9a       	sbi	0x05, 0	; 5
 1a0:	f7 cf       	rjmp	.-18     	; 0x190 <main+0x92>
		else
		PORTB &= ~(1<<PORTB0);
 1a2:	28 98       	cbi	0x05, 0	; 5
 1a4:	f5 cf       	rjmp	.-22     	; 0x190 <main+0x92>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
