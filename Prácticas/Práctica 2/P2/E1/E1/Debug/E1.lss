
E1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000747  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000699  00000000  00000000  00000907  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000273  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  000015a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001615  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "PARAMETERS.h"

int main(void) {
	/** ------------ SETUP ------------------ */
	/// 1) Set pin 0-3 in PORTD as output pin
	DDRD |=(1<<DDD2) | (1<<DDD3) | (1<<DDD4) | (1<<DDD5) | (1<<DDD7);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8c 6b       	ori	r24, 0xBC	; 188
  84:	8a b9       	out	0x0a, r24	; 10
	int cont = 0b00000000;
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
	
	/** ------------ LOOP ------------------- */
	while (1) {
		/// 1) LED OFF by clearing the pin PD3
		PORTD &= (~(1<<PORTD2)) & (~(1<<PORTD3)) & (~(1<<PORTD4)) & (~(1<<PORTD5));
  8a:	8b b1       	in	r24, 0x0b	; 11
  8c:	83 7c       	andi	r24, 0xC3	; 195
  8e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	4f ef       	ldi	r20, 0xFF	; 255
  92:	83 ed       	ldi	r24, 0xD3	; 211
  94:	90 e3       	ldi	r25, 0x30	; 48
  96:	41 50       	subi	r20, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
		/// 2) Delay of 500 milli-seconds
		_delay_ms(BLINK_TIME);
		/// 3) LED ON by setting the pin PD3
		PORTD = PORTD | ~(cont << 2) | (1<<PORTD7);
  a2:	8b b1       	in	r24, 0x0b	; 11
  a4:	92 2f       	mov	r25, r18
  a6:	99 0f       	add	r25, r25
  a8:	99 0f       	add	r25, r25
  aa:	90 95       	com	r25
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	89 2b       	or	r24, r25
  b0:	8b b9       	out	0x0b, r24	; 11
		;
		if(cont == 0b00001111)
  b2:	2f 30       	cpi	r18, 0x0F	; 15
  b4:	31 05       	cpc	r19, r1
  b6:	19 f0       	breq	.+6      	; 0xbe <main+0x3e>
			cont = 0b00000000;
		else
			cont++;
  b8:	2f 5f       	subi	r18, 0xFF	; 255
  ba:	3f 4f       	sbci	r19, 0xFF	; 255
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x42>
		_delay_ms(BLINK_TIME);
		/// 3) LED ON by setting the pin PD3
		PORTD = PORTD | ~(cont << 2) | (1<<PORTD7);
		;
		if(cont == 0b00001111)
			cont = 0b00000000;
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	4f ef       	ldi	r20, 0xFF	; 255
  c4:	83 ed       	ldi	r24, 0xD3	; 211
  c6:	90 e3       	ldi	r25, 0x30	; 48
  c8:	41 50       	subi	r20, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x48>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x52>
  d2:	00 00       	nop
  d4:	da cf       	rjmp	.-76     	; 0x8a <main+0xa>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
