
E7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078a  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bf  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  00000ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bb  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_readButton>:
#include "MACROS.h"
#include "PORTS.h"

bool GPIO_readButton()
{
	if((READ_PIN(PIND, PIND2)) == BUTTON_PRESSED)
  80:	4a 99       	sbic	0x09, 2	; 9
  82:	0d c0       	rjmp	.+26     	; 0x9e <GPIO_readButton+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	8f e3       	ldi	r24, 0x3F	; 63
  86:	9c e9       	ldi	r25, 0x9C	; 156
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <GPIO_readButton+0x8>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <GPIO_readButton+0xe>
  8e:	00 00       	nop
		///----------------------------------------------------------------
		/// 1.1. Wait for a time to avoid the pushbutton bounce
		_delay_ms(DEBOUNCE_TIME);
		///----------------------------------------------------------------
		/// 1.2. Check if the button is NOT already PRESSED
		if ((READ_PIN(PIND, PIND2)) != BUTTON_PRESSED)
  90:	89 b1       	in	r24, 0x09	; 9
  92:	82 fb       	bst	r24, 2
  94:	99 27       	eor	r25, r25
  96:	90 f9       	bld	r25, 0
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	89 27       	eor	r24, r25
  9c:	08 95       	ret
		{
			/// 1.2.2 Wait for a time to avoid bouncing in pushbutton (release)
			return BUTTON_PRESSED;
		}
	}
	return !BUTTON_PRESSED;
  9e:	81 e0       	ldi	r24, 0x01	; 1
}
  a0:	08 95       	ret

000000a2 <main>:

static inline void GPI0_init()
{
	//static: invisible outside of the file
	//inline: not called, copied into the file calling it instead
		GPI001 |=(1<<LED_MODE);
  a2:	53 9a       	sbi	0x0a, 3	; 10
		GPIO01_OUT |=(1<<BUTTON);
  a4:	5a 9a       	sbi	0x0b, 2	; 11
	{
		isButtonPressed = GPIO_readButton();
		_delay_ms(DEBOUNCE_TIME);
		if(isButtonPressed == BUTTON_PRESSED)
		{
			TOGGLEBIT(GPIO01_OUT, LED);
  a6:	c8 e0       	ldi	r28, 0x08	; 8
	///---------------------------------------------
	/// 2. Enable pull-up for the PUSHBUTTON
	/** ------------ LOOP ----------------------------------------*/
	while (1)
	{
		isButtonPressed = GPIO_readButton();
  a8:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_readButton>
  ac:	ef e3       	ldi	r30, 0x3F	; 63
  ae:	fc e9       	ldi	r31, 0x9C	; 156
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0xe>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x14>
  b6:	00 00       	nop
		_delay_ms(DEBOUNCE_TIME);
		if(isButtonPressed == BUTTON_PRESSED)
  b8:	81 11       	cpse	r24, r1
  ba:	f6 cf       	rjmp	.-20     	; 0xa8 <main+0x6>
		{
			TOGGLEBIT(GPIO01_OUT, LED);
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8c 27       	eor	r24, r28
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	f2 cf       	rjmp	.-28     	; 0xa8 <main+0x6>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
