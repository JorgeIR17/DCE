
E2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000883  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000735  00000000  00000000  00000ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035b  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041a  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000141  00000000  00000000  00001a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  88:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:

volatile uint16_t ldrvalue = 0;


// ADC interrupt service routine
ISR(ADC_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
	ldrvalue = ADC; // Read ADC value
  a4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  a8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  ac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if (ldrvalue < SETPOINT) {
  b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  bc:	81 15       	cp	r24, r1
  be:	92 40       	sbci	r25, 0x02	; 2
  c0:	10 f4       	brcc	.+4      	; 0xc6 <__vector_21+0x36>
		// If ambient light is below threshold, switch on LED
		LED_ON(PORTB, LED_PIN);
  c2:	28 9a       	sbi	0x05, 0	; 5
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <__vector_21+0x38>
		} else {
		// Otherwise, switch off LED
		LED_OFF(PORTB, LED_PIN);
  c6:	28 98       	cbi	0x05, 0	; 5
{
    ADCSRA &= ~(1<<ADIE);
}

static inline void ADC_START(){
	ADCSRA |= (1<<ADSC);
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
	}
	
	ADC_START();
}
  d2:	ff 91       	pop	r31
  d4:	ef 91       	pop	r30
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	2f 91       	pop	r18
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <main>:

int main() {
	DDRB |= (1 << LED_PIN);
  e6:	20 9a       	sbi	0x04, 0	; 4
#ifndef ADC_H_
#define ADC_H_

static inline void init_ADC(uint8_t VREF, uint8_t ALIGN, uint8_t PRESCALER)
{
    ADMUX &= (0b00110000); //DELETE
  e8:	ac e7       	ldi	r26, 0x7C	; 124
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	8c 91       	ld	r24, X
  ee:	80 73       	andi	r24, 0x30	; 48
  f0:	8c 93       	st	X, r24
    ADMUX |= (VREF << REFS0); // AVCC
  f2:	8c 91       	ld	r24, X
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	8c 93       	st	X, r24
    ADMUX |= (ALIGN << ADLAR); //ALIGNMENT
  f8:	8c 91       	ld	r24, X
  fa:	8c 93       	st	X, r24
    ADCSRA &= (0b00000000);
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	10 82       	st	Z, r1
    ADCSRA |= (PRESCALER << ADPS0); //PRESCALER 125KHz
 104:	80 81       	ld	r24, Z
 106:	87 60       	ori	r24, 0x07	; 7
 108:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN); //ENABLE ADEN
 10a:	80 81       	ld	r24, Z
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADSC);
}

static inline void ADC_enableInt()
{
    ADCSRA |= (1<<ADIE);
 110:	80 81       	ld	r24, Z
 112:	88 60       	ori	r24, 0x08	; 8
 114:	80 83       	st	Z, r24
    ADCSRA |= (PRESCALER << ADPS0); //PRESCALER 125KHz
    ADCSRA |= (1 << ADEN); //ENABLE ADEN
}
static inline void ADC_select_channel(uint16_t channel)
{
    ADMUX &= (0b11110000);
 116:	8c 91       	ld	r24, X
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	8c 93       	st	X, r24
    ADMUX |= (channel << MUX0);
 11c:	8c 91       	ld	r24, X
 11e:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADSC);
 120:	80 81       	ld	r24, Z
 122:	80 64       	ori	r24, 0x40	; 64
 124:	80 83       	st	Z, r24
	init_ADC(AVCC, ALIGN_RIGHT, PRESCALER_128);
	ADC_enableInt(); // Enable ADC interrupt
	ADC_select_channel(0); // Set ADC input channel to PC0
	sei(); // Enable global interrupts
 126:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	81 ee       	ldi	r24, 0xE1	; 225
 12c:	94 e0       	ldi	r25, 0x04	; 4
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x48>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x52>
 138:	00 00       	nop
 13a:	f6 cf       	rjmp	.-20     	; 0x128 <main+0x42>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
