
E3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000378  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800192  00800192  0000049e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6a  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000888  00000000  00000000  000011da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050a  00000000  00000000  00001a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048f  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ef  00000000  00000000  000024bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000027aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 39       	cpi	r26, 0x92	; 146
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e9       	ldi	r26, 0x92	; 146
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 39       	cpi	r26, 0x96	; 150
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  9e:	0c 94 ba 01 	jmp	0x374	; 0x374 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Read_Single_Poll>:
#include "ADC.h"

//----------------------------------------------------------------------
uint16_t ADC_Read_Single_Poll(uint8_t channel)
{
	ADCSRA |= (1<<ADIF);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	90 61       	ori	r25, 0x10	; 16
  ae:	90 83       	st	Z, r25
	ADMUX &= ~((1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3));
  b0:	ac e7       	ldi	r26, 0x7C	; 124
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	9c 91       	ld	r25, X
  b6:	90 7f       	andi	r25, 0xF0	; 240
  b8:	9c 93       	st	X, r25
	ADMUX |= (channel << MUX0);
  ba:	9c 91       	ld	r25, X
  bc:	89 2b       	or	r24, r25
  be:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24

	while((ADCSRA && (1<<ADIF))==0){}
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	e9 f3       	breq	.-6      	; 0xc6 <ADC_Read_Single_Poll+0x20>

	return ADC;
  cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
  d4:	08 95       	ret

000000d6 <ADC_Read_Multiple_Poll>:

uint16_t ADC_Read_Multiple_Poll(uint8_t channel, uint8_t times)
{
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	f8 2e       	mov	r15, r24
  e2:	d6 2f       	mov	r29, r22
	ADC_Read_Single_Poll(channel);
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Read_Single_Poll>
	uint16_t res = 0;
	for(uint8_t i = 0; i < times; i++)
  e8:	dd 23       	and	r29, r29
  ea:	c9 f1       	breq	.+114    	; 0x15e <ADC_Read_Multiple_Poll+0x88>
  ec:	c0 e0       	ldi	r28, 0x00	; 0
  ee:	00 e0       	ldi	r16, 0x00	; 0
  f0:	10 e0       	ldi	r17, 0x00	; 0
    {
		res += ADC_Read_Single_Poll(channel);
  f2:	8f 2d       	mov	r24, r15
  f4:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Read_Single_Poll>
  f8:	08 0f       	add	r16, r24
  fa:	19 1f       	adc	r17, r25

uint16_t ADC_Read_Multiple_Poll(uint8_t channel, uint8_t times)
{
	ADC_Read_Single_Poll(channel);
	uint16_t res = 0;
	for(uint8_t i = 0; i < times; i++)
  fc:	cf 5f       	subi	r28, 0xFF	; 255
  fe:	dc 13       	cpse	r29, r28
 100:	f8 cf       	rjmp	.-16     	; 0xf2 <ADC_Read_Multiple_Poll+0x1c>
    {
		res += ADC_Read_Single_Poll(channel);
	}

	switch(times)
 102:	d4 30       	cpi	r29, 0x04	; 4
 104:	81 f0       	breq	.+32     	; 0x126 <ADC_Read_Multiple_Poll+0x50>
 106:	28 f4       	brcc	.+10     	; 0x112 <ADC_Read_Multiple_Poll+0x3c>
 108:	d1 30       	cpi	r29, 0x01	; 1
 10a:	89 f1       	breq	.+98     	; 0x16e <ADC_Read_Multiple_Poll+0x98>
 10c:	d2 30       	cpi	r29, 0x02	; 2
 10e:	41 f0       	breq	.+16     	; 0x120 <ADC_Read_Multiple_Poll+0x4a>
 110:	28 c0       	rjmp	.+80     	; 0x162 <ADC_Read_Multiple_Poll+0x8c>
 112:	d0 31       	cpi	r29, 0x10	; 16
 114:	a1 f0       	breq	.+40     	; 0x13e <ADC_Read_Multiple_Poll+0x68>
 116:	d0 32       	cpi	r29, 0x20	; 32
 118:	c9 f0       	breq	.+50     	; 0x14c <ADC_Read_Multiple_Poll+0x76>
 11a:	d8 30       	cpi	r29, 0x08	; 8
 11c:	11 f5       	brne	.+68     	; 0x162 <ADC_Read_Multiple_Poll+0x8c>
 11e:	08 c0       	rjmp	.+16     	; 0x130 <ADC_Read_Multiple_Poll+0x5a>
    {
		case 1: break;
		case 2: res = res >> 1; break;
 120:	16 95       	lsr	r17
 122:	07 95       	ror	r16
 124:	24 c0       	rjmp	.+72     	; 0x16e <ADC_Read_Multiple_Poll+0x98>
		case 4: res = res >> 2; break;
 126:	16 95       	lsr	r17
 128:	07 95       	ror	r16
 12a:	16 95       	lsr	r17
 12c:	07 95       	ror	r16
 12e:	1f c0       	rjmp	.+62     	; 0x16e <ADC_Read_Multiple_Poll+0x98>
		case 8: res = res >> 3; break;
 130:	16 95       	lsr	r17
 132:	07 95       	ror	r16
 134:	16 95       	lsr	r17
 136:	07 95       	ror	r16
 138:	16 95       	lsr	r17
 13a:	07 95       	ror	r16
 13c:	18 c0       	rjmp	.+48     	; 0x16e <ADC_Read_Multiple_Poll+0x98>
		case 16: res = res >> 4; break;
 13e:	12 95       	swap	r17
 140:	02 95       	swap	r16
 142:	0f 70       	andi	r16, 0x0F	; 15
 144:	01 27       	eor	r16, r17
 146:	1f 70       	andi	r17, 0x0F	; 15
 148:	01 27       	eor	r16, r17
 14a:	11 c0       	rjmp	.+34     	; 0x16e <ADC_Read_Multiple_Poll+0x98>
		case 32: res = res >> 5; break;
 14c:	16 95       	lsr	r17
 14e:	07 95       	ror	r16
 150:	12 95       	swap	r17
 152:	02 95       	swap	r16
 154:	0f 70       	andi	r16, 0x0F	; 15
 156:	01 27       	eor	r16, r17
 158:	1f 70       	andi	r17, 0x0F	; 15
 15a:	01 27       	eor	r16, r17
 15c:	08 c0       	rjmp	.+16     	; 0x16e <ADC_Read_Multiple_Poll+0x98>
}

uint16_t ADC_Read_Multiple_Poll(uint8_t channel, uint8_t times)
{
	ADC_Read_Single_Poll(channel);
	uint16_t res = 0;
 15e:	00 e0       	ldi	r16, 0x00	; 0
 160:	10 e0       	ldi	r17, 0x00	; 0
		case 2: res = res >> 1; break;
		case 4: res = res >> 2; break;
		case 8: res = res >> 3; break;
		case 16: res = res >> 4; break;
		case 32: res = res >> 5; break;
		default: res/= times; break;
 162:	6d 2f       	mov	r22, r29
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	c8 01       	movw	r24, r16
 168:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__udivmodhi4>
 16c:	8b 01       	movw	r16, r22
	}
	return res;
}
 16e:	c8 01       	movw	r24, r16
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	08 95       	ret

0000017c <USART0_putchar>:
#define BAUD 9600
#define UBRR_VALUE ((F_CPU/(16UL*BAUD))-1)

void USART0_putchar(unsigned char data)
{
    while(!(UCSR0A & (1 << UDRE0))){}
 17c:	e0 ec       	ldi	r30, 0xC0	; 192
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	90 81       	ld	r25, Z
 182:	95 ff       	sbrs	r25, 5
 184:	fd cf       	rjmp	.-6      	; 0x180 <USART0_putchar+0x4>
    UDR0 = data;
 186:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 18a:	08 95       	ret

0000018c <USART0_putString>:
}

void USART0_putString(char *strPointer)
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
    while(*strPointer){
 192:	88 81       	ld	r24, Y
 194:	88 23       	and	r24, r24
 196:	31 f0       	breq	.+12     	; 0x1a4 <USART0_putString+0x18>
 198:	21 96       	adiw	r28, 0x01	; 1
        USART0_putchar(*strPointer);
 19a:	0e 94 be 00 	call	0x17c	; 0x17c <USART0_putchar>
    UDR0 = data;
}

void USART0_putString(char *strPointer)
{
    while(*strPointer){
 19e:	89 91       	ld	r24, Y+
 1a0:	81 11       	cpse	r24, r1
 1a2:	fb cf       	rjmp	.-10     	; 0x19a <USART0_putString+0xe>
        USART0_putchar(*strPointer);
        strPointer++;
    }
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <USART0_Getchar>:

char USART0_Getchar(void)
{
    while(!(UCSR0A & (1 << RXC0))){}
 1aa:	e0 ec       	ldi	r30, 0xC0	; 192
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	88 23       	and	r24, r24
 1b2:	ec f7       	brge	.-6      	; 0x1ae <USART0_Getchar+0x4>
    return UDR0;
 1b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 1b8:	08 95       	ret

000001ba <main>:

volatile uint16_t pot_value = 0;



int main() {
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <main+0x6>
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <main+0x8>
 1c2:	1f 92       	push	r1
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<LED_PIN);
 1c8:	20 9a       	sbi	0x04, 0	; 4
#ifndef ADC_H_
#define ADC_H_

static inline void init_ADC(uint8_t VREF, uint8_t ALIGN, uint8_t PRESCALER)
{
    ADMUX &= (0b00110000); //DELETE
 1ca:	ec e7       	ldi	r30, 0x7C	; 124
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 73       	andi	r24, 0x30	; 48
 1d2:	80 83       	st	Z, r24
    ADMUX |= (VREF << REFS0); // AVCC
 1d4:	80 81       	ld	r24, Z
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	80 83       	st	Z, r24
    ADMUX |= (ALIGN << ADLAR); //ALIGNMENT
 1da:	80 81       	ld	r24, Z
 1dc:	80 83       	st	Z, r24
    ADCSRA &= (0b00000000);
 1de:	ea e7       	ldi	r30, 0x7A	; 122
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	10 82       	st	Z, r1
    ADCSRA |= (PRESCALER << ADPS0); //PRESCALER 125KHz
 1e6:	80 81       	ld	r24, Z
 1e8:	87 60       	ori	r24, 0x07	; 7
 1ea:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN); //ENABLE ADEN
 1ec:	80 81       	ld	r24, Z
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	80 83       	st	Z, r24

static inline void USART0_init(uint16_t valueUBBR)
{
    UBRR0H = (unsigned char) (UBRR_VALUE>>8);
 1f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (unsigned char) UBRR_VALUE;
 1f6:	87 e6       	ldi	r24, 0x67	; 103
 1f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    ///--------------------------------------------------------
    /// 2.- enable receiver and transmitter
    ///--------------------------------------------------------
    UCSR0B |= (1 << RXEN0) | (1<<TXEN0);
 1fc:	e1 ec       	ldi	r30, 0xC1	; 193
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	88 61       	ori	r24, 0x18	; 24
 204:	80 83       	st	Z, r24
    ///--------------------------------------------------------
    /// 3.- set the speed: normal Asynchronous
    /// 4.- set frame format:
    UCSR0C |= (1<<UCSZ01) | (1<< UCSZ00);
 206:	e2 ec       	ldi	r30, 0xC2	; 194
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	86 60       	ori	r24, 0x06	; 6
 20e:	80 83       	st	Z, r24
	USART0_init(UBRR_VALUE);
	
	while (1) {
		char adc_string[5];
		// Show menu via serial communication
		USART0_putString("Menu:\r\n");
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0_putString>
		USART0_putString("1. Measurement of the LDR\r\n");
 218:	88 e0       	ldi	r24, 0x08	; 8
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0_putString>
		USART0_putString("2. Measurement of the potentiometer\r\n");
 220:	84 e2       	ldi	r24, 0x24	; 36
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0_putString>
		USART0_putString("Enter your choice: ");
 228:	8a e4       	ldi	r24, 0x4A	; 74
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0_putString>

		// Wait for user input
		unsigned char choice = USART0_Getchar();
 230:	0e 94 d5 00 	call	0x1aa	; 0x1aa <USART0_Getchar>
 234:	18 2f       	mov	r17, r24
		USART0_putchar(choice);
 236:	0e 94 be 00 	call	0x17c	; 0x17c <USART0_putchar>
		USART0_putString("\r\n");
 23a:	85 e0       	ldi	r24, 0x05	; 5
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0_putString>

		// Perform measurement based on user choice
		switch (choice) {
 242:	11 33       	cpi	r17, 0x31	; 49
 244:	19 f0       	breq	.+6      	; 0x24c <main+0x92>
 246:	12 33       	cpi	r17, 0x32	; 50
 248:	51 f1       	breq	.+84     	; 0x29e <main+0xe4>
 24a:	48 c0       	rjmp	.+144    	; 0x2dc <main+0x122>
			case '1':
			{
			// Read LDR value
			ldr_value = ADC_Read_Multiple_Poll(0, 16);
 24c:	60 e1       	ldi	r22, 0x10	; 16
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_Read_Multiple_Poll>
 254:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <ldr_value+0x1>
 258:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <ldr_value>
			if(ldr_value < SETPOINT)
 25c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <ldr_value>
 260:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <ldr_value+0x1>
 264:	81 15       	cp	r24, r1
 266:	92 40       	sbci	r25, 0x02	; 2
 268:	10 f4       	brcc	.+4      	; 0x26e <main+0xb4>
				LED_ON(PORTB, LED_PIN);
 26a:	28 9a       	sbi	0x05, 0	; 5
 26c:	01 c0       	rjmp	.+2      	; 0x270 <main+0xb6>
			else
				LED_OFF(PORTB, LED_PIN);
 26e:	28 98       	cbi	0x05, 0	; 5
			utoa(ldr_value, adc_string, 10); // Convierte el valor del ADC a una cadena decimal
 270:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <ldr_value>
 274:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <ldr_value+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 278:	4a e0       	ldi	r20, 0x0A	; 10
 27a:	be 01       	movw	r22, r28
 27c:	6f 5f       	subi	r22, 0xFF	; 255
 27e:	7f 4f       	sbci	r23, 0xFF	; 255
 280:	0e 94 90 01 	call	0x320	; 0x320 <__utoa_ncheck>
			// Send LDR value via serial communication
			USART0_putString("LDR value: ");
 284:	8e e5       	ldi	r24, 0x5E	; 94
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0_putString>
			USART0_putString(adc_string);
 28c:	ce 01       	movw	r24, r28
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0_putString>
			USART0_putString("\r\n");
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0_putString>
			}
			break;
 29c:	23 c0       	rjmp	.+70     	; 0x2e4 <main+0x12a>
			case '2':
			{
			// Read potentiometer value
			pot_value = ADC_Read_Multiple_Poll(1, 16);
 29e:	60 e1       	ldi	r22, 0x10	; 16
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_Read_Multiple_Poll>
 2a6:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
 2aa:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
			utoa(pot_value, adc_string, 10); // Convierte el valor del ADC a una cadena decimal
 2ae:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 2b2:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
 2b6:	4a e0       	ldi	r20, 0x0A	; 10
 2b8:	be 01       	movw	r22, r28
 2ba:	6f 5f       	subi	r22, 0xFF	; 255
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	0e 94 90 01 	call	0x320	; 0x320 <__utoa_ncheck>
			// Send potentiometer value via serial communication
			USART0_putString("Potentiometer value: ");
 2c2:	8a e6       	ldi	r24, 0x6A	; 106
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0_putString>
			USART0_putString(adc_string);
 2ca:	ce 01       	movw	r24, r28
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0_putString>
			USART0_putString("\r\n");
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0_putString>
			}
			break;
 2da:	04 c0       	rjmp	.+8      	; 0x2e4 <main+0x12a>
			default:
			// Invalid choice
			USART0_putString("Invalid choice\r\n");
 2dc:	80 e8       	ldi	r24, 0x80	; 128
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0_putString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	93 ed       	ldi	r25, 0xD3	; 211
 2e8:	20 e3       	ldi	r18, 0x30	; 48
 2ea:	81 50       	subi	r24, 0x01	; 1
 2ec:	90 40       	sbci	r25, 0x00	; 0
 2ee:	20 40       	sbci	r18, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <main+0x130>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0x13a>
 2f4:	00 00       	nop
			break;
		}

		_delay_ms(1000); // Delay to prevent flickering in the serial monitor
	}
 2f6:	8c cf       	rjmp	.-232    	; 0x210 <main+0x56>

000002f8 <__udivmodhi4>:
 2f8:	aa 1b       	sub	r26, r26
 2fa:	bb 1b       	sub	r27, r27
 2fc:	51 e1       	ldi	r21, 0x11	; 17
 2fe:	07 c0       	rjmp	.+14     	; 0x30e <__udivmodhi4_ep>

00000300 <__udivmodhi4_loop>:
 300:	aa 1f       	adc	r26, r26
 302:	bb 1f       	adc	r27, r27
 304:	a6 17       	cp	r26, r22
 306:	b7 07       	cpc	r27, r23
 308:	10 f0       	brcs	.+4      	; 0x30e <__udivmodhi4_ep>
 30a:	a6 1b       	sub	r26, r22
 30c:	b7 0b       	sbc	r27, r23

0000030e <__udivmodhi4_ep>:
 30e:	88 1f       	adc	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	5a 95       	dec	r21
 314:	a9 f7       	brne	.-22     	; 0x300 <__udivmodhi4_loop>
 316:	80 95       	com	r24
 318:	90 95       	com	r25
 31a:	bc 01       	movw	r22, r24
 31c:	cd 01       	movw	r24, r26
 31e:	08 95       	ret

00000320 <__utoa_ncheck>:
 320:	bb 27       	eor	r27, r27

00000322 <__utoa_common>:
 322:	fb 01       	movw	r30, r22
 324:	55 27       	eor	r21, r21
 326:	aa 27       	eor	r26, r26
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	aa 1f       	adc	r26, r26
 32e:	a4 17       	cp	r26, r20
 330:	10 f0       	brcs	.+4      	; 0x336 <__utoa_common+0x14>
 332:	a4 1b       	sub	r26, r20
 334:	83 95       	inc	r24
 336:	50 51       	subi	r21, 0x10	; 16
 338:	b9 f7       	brne	.-18     	; 0x328 <__utoa_common+0x6>
 33a:	a0 5d       	subi	r26, 0xD0	; 208
 33c:	aa 33       	cpi	r26, 0x3A	; 58
 33e:	08 f0       	brcs	.+2      	; 0x342 <__utoa_common+0x20>
 340:	a9 5d       	subi	r26, 0xD9	; 217
 342:	a1 93       	st	Z+, r26
 344:	00 97       	sbiw	r24, 0x00	; 0
 346:	79 f7       	brne	.-34     	; 0x326 <__utoa_common+0x4>
 348:	b1 11       	cpse	r27, r1
 34a:	b1 93       	st	Z+, r27
 34c:	11 92       	st	Z+, r1
 34e:	cb 01       	movw	r24, r22
 350:	0c 94 aa 01 	jmp	0x354	; 0x354 <strrev>

00000354 <strrev>:
 354:	dc 01       	movw	r26, r24
 356:	fc 01       	movw	r30, r24
 358:	67 2f       	mov	r22, r23
 35a:	71 91       	ld	r23, Z+
 35c:	77 23       	and	r23, r23
 35e:	e1 f7       	brne	.-8      	; 0x358 <strrev+0x4>
 360:	32 97       	sbiw	r30, 0x02	; 2
 362:	04 c0       	rjmp	.+8      	; 0x36c <strrev+0x18>
 364:	7c 91       	ld	r23, X
 366:	6d 93       	st	X+, r22
 368:	70 83       	st	Z, r23
 36a:	62 91       	ld	r22, -Z
 36c:	ae 17       	cp	r26, r30
 36e:	bf 07       	cpc	r27, r31
 370:	c8 f3       	brcs	.-14     	; 0x364 <strrev+0x10>
 372:	08 95       	ret

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
