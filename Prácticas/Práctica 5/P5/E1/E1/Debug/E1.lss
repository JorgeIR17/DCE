
E1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000206  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ace  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a3  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cb  00000000  00000000  0000169d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048a  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002fe  00000000  00000000  000020b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6f 00 	call	0xde	; 0xde <main>
  78:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_Read_Single_Poll>:
#include "ADC.h"

//----------------------------------------------------------------------
uint16_t ADC_Read_Single_Poll(uint8_t channel)
{
	ADCSRA |= (1<<ADIF);
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 81       	ld	r25, Z
  86:	90 61       	ori	r25, 0x10	; 16
  88:	90 83       	st	Z, r25
	ADMUX &= ~((1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3));
  8a:	ac e7       	ldi	r26, 0x7C	; 124
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	9c 91       	ld	r25, X
  90:	90 7f       	andi	r25, 0xF0	; 240
  92:	9c 93       	st	X, r25
	ADMUX |= (channel << MUX0);
  94:	9c 91       	ld	r25, X
  96:	89 2b       	or	r24, r25
  98:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24

	while((ADCSRA && (1<<ADIF))==0){}
  a0:	80 81       	ld	r24, Z
  a2:	88 23       	and	r24, r24
  a4:	e9 f3       	breq	.-6      	; 0xa0 <ADC_Read_Single_Poll+0x20>

	return ADC;
  a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  aa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
  ae:	08 95       	ret

000000b0 <USART0_putchar>:

char USART0_Getchar(void)
{
    while(!(UCSR0A & (1 << RXC0))){}
    return UDR0;
}
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	95 ff       	sbrs	r25, 5
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <USART0_putchar+0x4>
  ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  be:	08 95       	ret

000000c0 <USART0_putString>:
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	ec 01       	movw	r28, r24
  c6:	88 81       	ld	r24, Y
  c8:	88 23       	and	r24, r24
  ca:	31 f0       	breq	.+12     	; 0xd8 <USART0_putString+0x18>
  cc:	21 96       	adiw	r28, 0x01	; 1
  ce:	0e 94 58 00 	call	0xb0	; 0xb0 <USART0_putchar>
  d2:	89 91       	ld	r24, Y+
  d4:	81 11       	cpse	r24, r1
  d6:	fb cf       	rjmp	.-10     	; 0xce <USART0_putString+0xe>
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <main>:
#include "ADC.h"
#include "PORTS.h"
#include "LED_BUTTON.h"

int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0x6>
  e4:	00 d0       	rcall	.+0      	; 0xe6 <main+0x8>
  e6:	1f 92       	push	r1
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62

static inline void GPIO_init()
{
	//static: invisible outside of the file
	//inline: not called, copied into the file calling it instead
		GPI001 |=(1<<LED1_MODE) | (1<<LED2_MODE) | (1<<LED3_MODE) | (1<<LED4_MODE);
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	88 67       	ori	r24, 0x78	; 120
  f0:	8a b9       	out	0x0a, r24	; 10
		GPIO_1_OUT |=(1<<BUTTON);
  f2:	5a 9a       	sbi	0x0b, 2	; 11

static inline void USART0_init(uint16_t valueUBBR)
{
    UBRR0H = (unsigned char) (UBRR_VALUE>>8);
  f4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (unsigned char) UBRR_VALUE;
  f8:	87 e6       	ldi	r24, 0x67	; 103
  fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    ///--------------------------------------------------------
    /// 2.- enable receiver and transmitter
    ///--------------------------------------------------------
    UCSR0B |= (1 << RXEN0) | (1<<TXEN0);
  fe:	e1 ec       	ldi	r30, 0xC1	; 193
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	88 61       	ori	r24, 0x18	; 24
 106:	80 83       	st	Z, r24
    ///--------------------------------------------------------
    /// 3.- set the speed: normal Asynchronous
    /// 4.- set frame format:
    UCSR0C |= (1<<UCSZ01) | (1<< UCSZ00);
 108:	e2 ec       	ldi	r30, 0xC2	; 194
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	86 60       	ori	r24, 0x06	; 6
 110:	80 83       	st	Z, r24
#ifndef ADC_H_
#define ADC_H_

static inline void init_ADC(uint8_t VREF, uint8_t ALIGN, uint8_t PRESCALER)
{
    ADMUX &= (0b00110000); //DELETE
 112:	ec e7       	ldi	r30, 0x7C	; 124
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 73       	andi	r24, 0x30	; 48
 11a:	80 83       	st	Z, r24
    ADMUX |= (VREF << REFS0); // AVCC
 11c:	80 81       	ld	r24, Z
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	80 83       	st	Z, r24
    ADMUX |= (ALIGN << ADLAR); //ALIGNMENT
 122:	80 81       	ld	r24, Z
 124:	80 83       	st	Z, r24
    ADCSRA &= (0b00000000);
 126:	ea e7       	ldi	r30, 0x7A	; 122
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	10 82       	st	Z, r1
    ADCSRA |= (PRESCALER << ADPS0); //PRESCALER 125KHz
 12e:	80 81       	ld	r24, Z
 130:	87 60       	ori	r24, 0x07	; 7
 132:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN); //ENABLE ADEN
 134:	80 81       	ld	r24, Z
 136:	80 68       	ori	r24, 0x80	; 128
 138:	80 83       	st	Z, r24
	uint8_t channel = 0;
	
	while (1)
	{
		// Leer valor del ADC
		uint16_t adc_value = ADC_Read_Single_Poll(channel);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 40 00 	call	0x80	; 0x80 <ADC_Read_Single_Poll>
 140:	8c 01       	movw	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 142:	4a e0       	ldi	r20, 0x0A	; 10
 144:	be 01       	movw	r22, r28
 146:	6f 5f       	subi	r22, 0xFF	; 255
 148:	7f 4f       	sbci	r23, 0xFF	; 255
 14a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <__utoa_ncheck>
		// Convertir el valor del ADC a una cadena de caracteres
		char adc_string[5]; // Suponiendo que el valor máximo del ADC es 1023
		utoa(adc_value, adc_string, 10); // Convierte el valor del ADC a una cadena decimal
		
		// Enviar la cadena a través de USART
		USART0_putString(adc_string);
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	0e 94 60 00 	call	0xc0	; 0xc0 <USART0_putString>
		USART0_putchar('\n'); // Agrega un salto de línea para mejorar la legibilidad
 156:	8a e0       	ldi	r24, 0x0A	; 10
 158:	0e 94 58 00 	call	0xb0	; 0xb0 <USART0_putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	81 ee       	ldi	r24, 0xE1	; 225
 160:	94 e0       	ldi	r25, 0x04	; 4
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x84>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x8e>
 16c:	00 00       	nop
		
		_delay_ms(100); // Espera un segundo antes de leer el ADC nuevamente (opcional)

		
		// Apagar todos los LEDs
		GPIO_1_OUT &= ~(0b11111111);
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	1b b8       	out	0x0b, r1	; 11
		
		// Lógica de encendido de LEDs (mantenida desde el código original)
		if (adc_value > 0 && adc_value <= 255)
 172:	c8 01       	movw	r24, r16
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	8f 3f       	cpi	r24, 0xFF	; 255
 178:	91 05       	cpc	r25, r1
 17a:	10 f4       	brcc	.+4      	; 0x180 <main+0xa2>
		{
			LED_ON(GPIO_1_OUT, LED1_PIN);
 17c:	5b 9a       	sbi	0x0b, 3	; 11
 17e:	dd cf       	rjmp	.-70     	; 0x13a <main+0x5c>
		}
		else if (adc_value > 255 && adc_value <= 512)
 180:	c8 01       	movw	r24, r16
 182:	9a 95       	dec	r25
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	91 40       	sbci	r25, 0x01	; 1
 188:	10 f4       	brcc	.+4      	; 0x18e <main+0xb0>
		{
			LED_ON(GPIO_1_OUT, LED2_PIN);
 18a:	5c 9a       	sbi	0x0b, 4	; 11
 18c:	d6 cf       	rjmp	.-84     	; 0x13a <main+0x5c>
		}
		else if (adc_value > 512 && adc_value <= 768)
 18e:	c8 01       	movw	r24, r16
 190:	81 50       	subi	r24, 0x01	; 1
 192:	92 40       	sbci	r25, 0x02	; 2
 194:	8f 3f       	cpi	r24, 0xFF	; 255
 196:	91 05       	cpc	r25, r1
 198:	09 f0       	breq	.+2      	; 0x19c <main+0xbe>
 19a:	10 f4       	brcc	.+4      	; 0x1a0 <main+0xc2>
		{
			LED_ON(GPIO_1_OUT, LED3_PIN);
 19c:	5d 9a       	sbi	0x0b, 5	; 11
 19e:	cd cf       	rjmp	.-102    	; 0x13a <main+0x5c>
		}
		else if (adc_value > 768 && adc_value <= 1023)
 1a0:	01 50       	subi	r16, 0x01	; 1
 1a2:	13 40       	sbci	r17, 0x03	; 3
 1a4:	0f 3f       	cpi	r16, 0xFF	; 255
 1a6:	11 05       	cpc	r17, r1
 1a8:	40 f6       	brcc	.-112    	; 0x13a <main+0x5c>
		{
			LED_ON(GPIO_1_OUT, LED4_PIN);
 1aa:	5e 9a       	sbi	0x0b, 6	; 11
		}
		
	}
 1ac:	c6 cf       	rjmp	.-116    	; 0x13a <main+0x5c>

000001ae <__utoa_ncheck>:
 1ae:	bb 27       	eor	r27, r27

000001b0 <__utoa_common>:
 1b0:	fb 01       	movw	r30, r22
 1b2:	55 27       	eor	r21, r21
 1b4:	aa 27       	eor	r26, r26
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	aa 1f       	adc	r26, r26
 1bc:	a4 17       	cp	r26, r20
 1be:	10 f0       	brcs	.+4      	; 0x1c4 <__utoa_common+0x14>
 1c0:	a4 1b       	sub	r26, r20
 1c2:	83 95       	inc	r24
 1c4:	50 51       	subi	r21, 0x10	; 16
 1c6:	b9 f7       	brne	.-18     	; 0x1b6 <__utoa_common+0x6>
 1c8:	a0 5d       	subi	r26, 0xD0	; 208
 1ca:	aa 33       	cpi	r26, 0x3A	; 58
 1cc:	08 f0       	brcs	.+2      	; 0x1d0 <__utoa_common+0x20>
 1ce:	a9 5d       	subi	r26, 0xD9	; 217
 1d0:	a1 93       	st	Z+, r26
 1d2:	00 97       	sbiw	r24, 0x00	; 0
 1d4:	79 f7       	brne	.-34     	; 0x1b4 <__utoa_common+0x4>
 1d6:	b1 11       	cpse	r27, r1
 1d8:	b1 93       	st	Z+, r27
 1da:	11 92       	st	Z+, r1
 1dc:	cb 01       	movw	r24, r22
 1de:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <strrev>

000001e2 <strrev>:
 1e2:	dc 01       	movw	r26, r24
 1e4:	fc 01       	movw	r30, r24
 1e6:	67 2f       	mov	r22, r23
 1e8:	71 91       	ld	r23, Z+
 1ea:	77 23       	and	r23, r23
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <strrev+0x4>
 1ee:	32 97       	sbiw	r30, 0x02	; 2
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <strrev+0x18>
 1f2:	7c 91       	ld	r23, X
 1f4:	6d 93       	st	X+, r22
 1f6:	70 83       	st	Z, r23
 1f8:	62 91       	ld	r22, -Z
 1fa:	ae 17       	cp	r26, r30
 1fc:	bf 07       	cpc	r27, r31
 1fe:	c8 f3       	brcs	.-14     	; 0x1f2 <strrev+0x10>
 200:	08 95       	ret

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
