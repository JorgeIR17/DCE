
E7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001e8  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  0000027e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000881  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e4  00000000  00000000  00000bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000331  00000000  00000000  0000129d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000415  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000254  00000000  00000000  00001af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_1>
   8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  9e:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART0_putchar>:

char USART0_getchar(void)
{
    while(!(UCSR0A & (1 << RXC0))){}
    return UDR0;
}
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <USART0_putchar+0x4>
  b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  b4:	08 95       	ret

000000b6 <__vector_1>:

volatile char asciiChar = 'A'; // Initial ASCII character
volatile uint8_t buttonPressCount = 0; // Variable to count button presses

// External interrupt service routine for INT0
ISR(INT0_vect) {
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	3f 93       	push	r19
  c4:	4f 93       	push	r20
  c6:	5f 93       	push	r21
  c8:	6f 93       	push	r22
  ca:	7f 93       	push	r23
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
  d4:	ef 93       	push	r30
  d6:	ff 93       	push	r31
	// Increment the ASCII character
	asciiChar++;
  d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	// Reset to 'A' if ASCII character exceeds 'Z'
	if (asciiChar > 'Z') {
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e6:	8b 35       	cpi	r24, 0x5B	; 91
  e8:	18 f0       	brcs	.+6      	; 0xf0 <__vector_1+0x3a>
		asciiChar = 'A';
  ea:	81 e4       	ldi	r24, 0x41	; 65
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	// Transmit the ASCII character via USART
	USART0_putchar(asciiChar);
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  f4:	0e 94 53 00 	call	0xa6	; 0xa6 <USART0_putchar>
	// Increment the button press count
	buttonPressCount++;
  f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	// Display button press count using LEDs
	LED_COUNT_PORT = (LED_COUNT_PORT & ~LED_COUNT_MASK) | ((buttonPressCount << 4) & LED_COUNT_MASK);
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 108:	28 2f       	mov	r18, r24
 10a:	2f 70       	andi	r18, 0x0F	; 15
 10c:	30 e1       	ldi	r19, 0x10	; 16
 10e:	93 9f       	mul	r25, r19
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	82 2b       	or	r24, r18
 116:	8b b9       	out	0x0b, r24	; 11
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	7f 91       	pop	r23
 126:	6f 91       	pop	r22
 128:	5f 91       	pop	r21
 12a:	4f 91       	pop	r20
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__vector_2>:

// External interrupt service routine for INT1
ISR(INT1_vect) {
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	// Decrement the ASCII character
	asciiChar--;
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 160:	81 50       	subi	r24, 0x01	; 1
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	// Reset to 'Z' if ASCII character goes below 'A'
	if (asciiChar < 'A') {
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16a:	81 34       	cpi	r24, 0x41	; 65
 16c:	18 f4       	brcc	.+6      	; 0x174 <__vector_2+0x3a>
		asciiChar = 'Z';
 16e:	8a e5       	ldi	r24, 0x5A	; 90
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	// Transmit the ASCII character via USART
	USART0_putchar(asciiChar);
 174:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 178:	0e 94 53 00 	call	0xa6	; 0xa6 <USART0_putchar>
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <main>:
#define BUTTON       PORTD2

static inline void GPIO_init()
{
	// Set LED pins as output
	GPI001 |= (1 << LED0_MODE) | (1 << LED1_MODE) | (1 << LED2_MODE) | (1 << LED3_MODE);
 19e:	8a b1       	in	r24, 0x0a	; 10
 1a0:	80 6f       	ori	r24, 0xF0	; 240
 1a2:	8a b9       	out	0x0a, r24	; 10
	// Set BUTTON pin as output
	GPIO_1_OUT |= (1 << BUTTON);
 1a4:	5a 9a       	sbi	0x0b, 2	; 11
	GPIO_1_OUT |= (1 << PORTD3);
 1a6:	5b 9a       	sbi	0x0b, 3	; 11
#define LOW_LEVEL 0 // Decimal value equivalent to ICS01=0 and ICS00=0
#define CHANGE 1 // Decimal value equivalent to ICS01=0 and ICS00=1
#define FALLING 2 // Decimal value equivalent to ICS01=1 and ICS00=0
#define RISING 3 // Decimal value equivalent to ICS01=1 and ICS00=1

static inline void INT0_config (uint8_t typeTrigger)    {EICRA |= typeTrigger;}
 1a8:	e9 e6       	ldi	r30, 0x69	; 105
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	82 60       	ori	r24, 0x02	; 2
 1b0:	80 83       	st	Z, r24

static inline void INT1_config (uint8_t typeTrigger)    {EICRA |= (typeTrigger<<ISC10);}
 1b2:	80 81       	ld	r24, Z
 1b4:	88 60       	ori	r24, 0x08	; 8
 1b6:	80 83       	st	Z, r24

static inline void INT0_enable()                        {EIMSK |= (1<<INT0);}
 1b8:	e8 9a       	sbi	0x1d, 0	; 29

static inline void INT0_disable()                       {EIMSK &= ~(1<<INT0);}

static inline void INT1_enable()                        {EIMSK |= (1<<INT1);}
 1ba:	e9 9a       	sbi	0x1d, 1	; 29

static inline void USART0_init(uint16_t valueUBBR)
{
    UBRR0H = (unsigned char) (UBRR_VALUE>>8);
 1bc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (unsigned char) UBRR_VALUE;
 1c0:	87 e6       	ldi	r24, 0x67	; 103
 1c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    ///--------------------------------------------------------
    /// 2.- enable receiver and transmitter
    ///--------------------------------------------------------
    UCSR0B |= (1 << RXEN0) | (1<<TXEN0);
 1c6:	e1 ec       	ldi	r30, 0xC1	; 193
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	88 61       	ori	r24, 0x18	; 24
 1ce:	80 83       	st	Z, r24
    ///--------------------------------------------------------
    /// 3.- set the speed: normal Asynchronous
    /// 4.- set frame format:
    UCSR0C |= (1<<UCSZ01) | (1<< UCSZ00);
 1d0:	a2 ec       	ldi	r26, 0xC2	; 194
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	8c 91       	ld	r24, X
 1d6:	86 60       	ori	r24, 0x06	; 6
 1d8:	8c 93       	st	X, r24
}

static inline void USART0_enaInterrupt_RX()
{
	UCSR0B |= (1<<RXCIE0);
 1da:	80 81       	ld	r24, Z
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	80 83       	st	Z, r24
	// Initialize USART
	USART0_init(UBRR_VALUE);
	// Enable USART RX interrupt
	USART0_enaInterrupt_RX();
	// Enable global interrupts
	sei();
 1e0:	78 94       	sei
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <main+0x44>

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
