
E4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000184  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080c  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000708  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000301  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  000014cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e9  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e5  00000000  00000000  000019a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001b86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  8e:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART0_putchar>:

char USART0_getchar(void)
{
    while(!(UCSR0A & (1 << RXC0))){}
    return UDR0;
}
  96:	e0 ec       	ldi	r30, 0xC0	; 192
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	90 81       	ld	r25, Z
  9c:	95 ff       	sbrs	r25, 5
  9e:	fd cf       	rjmp	.-6      	; 0x9a <USART0_putchar+0x4>
  a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  a4:	08 95       	ret

000000a6 <__vector_1>:
#include "USART.h"

/// -------------  ISR functions -----------------------------------
ISR (INT0_vect)
///-------------------------------------------------------
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	cf 93       	push	r28
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	static char datum = 0x21;
	//-------------------------------------------------------------
	// 1.- Check if the USART is available for sending
	//-------------------------------------------------------------
	USART0_putchar(datum);			// BLOCKING!!! due to the "while" in the function.
  ca:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
  ce:	8c 2f       	mov	r24, r28
  d0:	0e 94 4b 00 	call	0x96	; 0x96 <USART0_putchar>
	//------------------------------------------------------------------
	// 2.- If the char has been sent, increment the ASCII while is in the range.
	//-----------------------------------------------------------------
	if( datum >= 0x7F )
  d4:	cf 37       	cpi	r28, 0x7F	; 127
  d6:	20 f0       	brcs	.+8      	; 0xe0 <__vector_1+0x3a>
	///-------------------------------------------------------
	{// 2.1.- If the last ASCII character has been reached, restart.
		datum = 0x21;
  d8:	81 e2       	ldi	r24, 0x21	; 33
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  de:	03 c0       	rjmp	.+6      	; 0xe6 <__vector_1+0x40>
	}							// Re-start "datum"
	else
	///-------------------------------------------------------
	{// 2.2.- Send the next ASCII char
		datum++;
  e0:	cf 5f       	subi	r28, 0xFF	; 255
  e2:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
	}
	///-------------------------------------------------------
}
  e6:	ff 91       	pop	r31
  e8:	ef 91       	pop	r30
  ea:	cf 91       	pop	r28
  ec:	bf 91       	pop	r27
  ee:	af 91       	pop	r26
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	7f 91       	pop	r23
  f6:	6f 91       	pop	r22
  f8:	5f 91       	pop	r21
  fa:	4f 91       	pop	r20
  fc:	3f 91       	pop	r19
  fe:	2f 91       	pop	r18
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <__vector_18>:

//-------------------------------------------------------------------
ISR (USART_RX_vect) {
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
	// Clear the 4 MSB in PORTD (mask 0x0F). Keep the value (Rpull-up)
	// OR with los 4 LSB of the ASCII char and shift left 4 bits
	GPIO_1_OUT = (GPIO_1_OUT & 0b00001111) | ((UDR0 & 0x0F) << LED0_PIN);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 122:	28 2f       	mov	r18, r24
 124:	2f 70       	andi	r18, 0x0F	; 15
 126:	30 e1       	ldi	r19, 0x10	; 16
 128:	93 9f       	mul	r25, r19
 12a:	c0 01       	movw	r24, r0
 12c:	11 24       	eor	r1, r1
 12e:	82 2b       	or	r24, r18
 130:	8b b9       	out	0x0b, r24	; 11
}
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <main>:
#define BUTTON       PORTD2

static inline void GPIO_init()
{
	// Set LED pins as output
	GPI001 |= (1 << LED0_MODE) | (1 << LED1_MODE) | (1 << LED2_MODE) | (1 << LED3_MODE);
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	80 6f       	ori	r24, 0xF0	; 240
 148:	8a b9       	out	0x0a, r24	; 10
	// Set BUTTON pin as output
	GPIO_1_OUT |= (1 << BUTTON);
 14a:	5a 9a       	sbi	0x0b, 2	; 11
#define LOW_LEVEL 0 // Decimal value equivalent to ICS01=0 and ICS00=0
#define CHANGE 1 // Decimal value equivalent to ICS01=0 and ICS00=1
#define FALLING 2 // Decimal value equivalent to ICS01=1 and ICS00=0
#define RISING 3 // Decimal value equivalent to ICS01=1 and ICS00=1

static inline void INT0_config (uint8_t typeTrigger)    {EICRA |= typeTrigger;}
 14c:	e9 e6       	ldi	r30, 0x69	; 105
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	82 60       	ori	r24, 0x02	; 2
 154:	80 83       	st	Z, r24

static inline void INT1_config (uint8_t typeTrigger)    {EICRA |= (typeTrigger<<ISC10);}

static inline void INT0_enable()                        {EIMSK |= (1<<INT0);}
 156:	e8 9a       	sbi	0x1d, 0	; 29

static inline void USART0_init(uint16_t valueUBBR)
{
    UBRR0H = (unsigned char) (UBRR_VALUE>>8);
 158:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (unsigned char) UBRR_VALUE;
 15c:	87 e6       	ldi	r24, 0x67	; 103
 15e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    ///--------------------------------------------------------
    /// 2.- enable receiver and transmitter
    ///--------------------------------------------------------
    UCSR0B |= (1 << RXEN0) | (1<<TXEN0);
 162:	e1 ec       	ldi	r30, 0xC1	; 193
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	88 61       	ori	r24, 0x18	; 24
 16a:	80 83       	st	Z, r24
    ///--------------------------------------------------------
    /// 3.- set the speed: normal Asynchronous
    /// 4.- set frame format:
    UCSR0C |= (1<<UCSZ01) | (1<< UCSZ00);
 16c:	a2 ec       	ldi	r26, 0xC2	; 194
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	8c 91       	ld	r24, X
 172:	86 60       	ori	r24, 0x06	; 6
 174:	8c 93       	st	X, r24
}

static inline void USART0_enaInterrupt_RX()
{
	UCSR0B |= (1<<RXCIE0);
 176:	80 81       	ld	r24, Z
 178:	80 68       	ori	r24, 0x80	; 128
 17a:	80 83       	st	Z, r24
	/// 3. USART setup (9600 8N1 - Keyboard)
	USART0_init(UBRR_VALUE);
	USART0_enaInterrupt_RX();
	//----------------------------------------------------------
	/// 4. Enable global interrupts
	sei();
 17c:	78 94       	sei
 17e:	ff cf       	rjmp	.-2      	; 0x17e <main+0x3a>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
