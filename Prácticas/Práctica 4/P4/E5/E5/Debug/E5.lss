
E5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000015a  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000814  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e8  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000309  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000163  00000000  00000000  0000195a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001abd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_19>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  8e:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_1>:
#include <avr/interrupt.h>
#include "PORTS.h"
#include "EXINT.h"
#include "USART.h"

ISR (INT0_vect){
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
	UCSR0B &= ~(1<<RXCIE0);
}

static inline void USART0_enaInterrupt_TX()
{
	UCSR0B |= (1<<UDRIE0);
  a6:	e1 ec       	ldi	r30, 0xC1	; 193
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	80 83       	st	Z, r24
	/// 1.- When the pushbutton triggers the INT0 the TX interrupt
	/// is enabled. When UDRE0 signals the USART is available,
	/// the UDRE interrupts is triggered. Then, it sends the message once.
	USART0_enaInterrupt_TX();
}
  b0:	ff 91       	pop	r31
  b2:	ef 91       	pop	r30
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_19>:
//-------------------------------------------------------------------
ISR (USART_UDRE_vect){
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	//--------------------------------------------------------
	// SOL_2 - (NON-BLOCKING!!!)
	// "Static", in other case the pointer is reset and "H" is
	// sent continuously.
	static char *strPointer="Hello World\n\r";
	if(*strPointer!= 0)
  d2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
  d6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
  da:	80 81       	ld	r24, Z
  dc:	88 23       	and	r24, r24
  de:	61 f0       	breq	.+24     	; 0xf8 <__vector_19+0x38>
	{
		UDR0 = *strPointer;
  e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
		strPointer++;
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  f6:	0b c0       	rjmp	.+22     	; 0x10e <__vector_19+0x4e>
}

static inline void USART0_disableInterrupt_TX()
{
	UCSR0B &= ~(1<<UDRIE0);
  f8:	e1 ec       	ldi	r30, 0xC1	; 193
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8f 7d       	andi	r24, 0xDF	; 223
 100:	80 83       	st	Z, r24
	else
	{
		// Disable the TX IRQ when the message has been transmitted
		USART0_disableInterrupt_TX();
		// Reset the pointer
		strPointer="Hello World\n\r";
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	//-------------------------------------------------------------
}
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <main>:
#define BUTTON       PORTD2

static inline void GPIO_init()
{
	// Set LED pins as output
	GPI001 |= (1 << LED0_MODE) | (1 << LED1_MODE) | (1 << LED2_MODE) | (1 << LED3_MODE);
 120:	8a b1       	in	r24, 0x0a	; 10
 122:	80 6f       	ori	r24, 0xF0	; 240
 124:	8a b9       	out	0x0a, r24	; 10
	// Set BUTTON pin as output
	GPIO_1_OUT |= (1 << BUTTON);
 126:	5a 9a       	sbi	0x0b, 2	; 11
#define LOW_LEVEL 0 // Decimal value equivalent to ICS01=0 and ICS00=0
#define CHANGE 1 // Decimal value equivalent to ICS01=0 and ICS00=1
#define FALLING 2 // Decimal value equivalent to ICS01=1 and ICS00=0
#define RISING 3 // Decimal value equivalent to ICS01=1 and ICS00=1

static inline void INT0_config (uint8_t typeTrigger)    {EICRA |= typeTrigger;}
 128:	e9 e6       	ldi	r30, 0x69	; 105
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	80 83       	st	Z, r24

static inline void INT1_config (uint8_t typeTrigger)    {EICRA |= (typeTrigger<<ISC10);}

static inline void INT0_enable()                        {EIMSK |= (1<<INT0);}
 132:	e8 9a       	sbi	0x1d, 0	; 29
    return UDR0;
}

static inline void USART0_init(uint16_t valueUBBR)
{
    UBRR0H = (unsigned char) (UBRR_VALUE>>8);
 134:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (unsigned char) UBRR_VALUE;
 138:	87 e6       	ldi	r24, 0x67	; 103
 13a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    ///--------------------------------------------------------
    /// 2.- enable receiver and transmitter
    ///--------------------------------------------------------
    UCSR0B |= (1 << RXEN0) | (1<<TXEN0);
 13e:	e1 ec       	ldi	r30, 0xC1	; 193
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 61       	ori	r24, 0x18	; 24
 146:	80 83       	st	Z, r24
    ///--------------------------------------------------------
    /// 3.- set the speed: normal Asynchronous
    /// 4.- set frame format:
    UCSR0C |= (1<<UCSZ01) | (1<< UCSZ00);
 148:	e2 ec       	ldi	r30, 0xC2	; 194
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	86 60       	ori	r24, 0x06	; 6
 150:	80 83       	st	Z, r24
	//----------------------------------------------------------
	/// 3. USART setup (9600 8N1 - Keyboard)
	USART0_init(UBRR_VALUE);
	//----------------------------------------------------------
	/// 4. Enable global interrupts
	sei();
 152:	78 94       	sei
 154:	ff cf       	rjmp	.-2      	; 0x154 <main+0x34>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
