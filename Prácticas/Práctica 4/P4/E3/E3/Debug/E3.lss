
E3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800100  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000825  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f2  00000000  00000000  00000b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b7  00000000  00000000  00001283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ca  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000019f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  8e:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART0_putchar>:
#define BAUD 9600
#define UBRR_VALUE ((F_CPU/(16UL*BAUD))-1)

void USART0_putchar(unsigned char data)
{
    while(!(UCSR0A & (1 << UDRE0))){}
  96:	e0 ec       	ldi	r30, 0xC0	; 192
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	90 81       	ld	r25, Z
  9c:	95 ff       	sbrs	r25, 5
  9e:	fd cf       	rjmp	.-6      	; 0x9a <USART0_putchar+0x4>
    UDR0 = data;
  a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  a4:	08 95       	ret

000000a6 <USART0_putString>:
}

void USART0_putString(char *strPointer)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
    while(*strPointer){
  ac:	88 81       	ld	r24, Y
  ae:	88 23       	and	r24, r24
  b0:	31 f0       	breq	.+12     	; 0xbe <USART0_putString+0x18>
  b2:	21 96       	adiw	r28, 0x01	; 1
        USART0_putchar(*strPointer);
  b4:	0e 94 4b 00 	call	0x96	; 0x96 <USART0_putchar>
    UDR0 = data;
}

void USART0_putString(char *strPointer)
{
    while(*strPointer){
  b8:	89 91       	ld	r24, Y+
  ba:	81 11       	cpse	r24, r1
  bc:	fb cf       	rjmp	.-10     	; 0xb4 <USART0_putString+0xe>
        USART0_putchar(*strPointer);
        strPointer++;
    }
}
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <USART0_getchar>:

char USART0_getchar(void)
{
    while(!(UCSR0A & (1 << RXC0))){}
  c4:	e0 ec       	ldi	r30, 0xC0	; 192
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 23       	and	r24, r24
  cc:	ec f7       	brge	.-6      	; 0xc8 <USART0_getchar+0x4>
    return UDR0;
  ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
  d2:	08 95       	ret

000000d4 <main>:

static inline void USART0_init(uint16_t valueUBBR)
{
    UBRR0H = (unsigned char) (UBRR_VALUE>>8);
  d4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (unsigned char) UBRR_VALUE;
  d8:	87 e6       	ldi	r24, 0x67	; 103
  da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    ///--------------------------------------------------------
    /// 2.- enable receiver and transmitter
    ///--------------------------------------------------------
    UCSR0B |= (1 << RXEN0) | (1<<TXEN0);
  de:	e1 ec       	ldi	r30, 0xC1	; 193
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 61       	ori	r24, 0x18	; 24
  e6:	80 83       	st	Z, r24
    ///--------------------------------------------------------
    /// 3.- set the speed: normal Asynchronous
    /// 4.- set frame format:
    UCSR0C |= (1<<UCSZ01) | (1<< UCSZ00);
  e8:	e2 ec       	ldi	r30, 0xC2	; 194
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	86 60       	ori	r24, 0x06	; 6
  f0:	80 83       	st	Z, r24
#include <avr/interrupt.h>
#include <util/delay.h>

static inline void mainMenu(void)
{
	USART0_putString("---------------------------\n\r"
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <USART0_putString>
	USART0_init(UBRR_VALUE);
	mainMenu();
	
	while(1)
	{
		key = USART0_getchar();
  fa:	0e 94 62 00 	call	0xc4	; 0xc4 <USART0_getchar>
		
		switch(key)
  fe:	82 36       	cpi	r24, 0x62	; 98
 100:	49 f0       	breq	.+18     	; 0x114 <main+0x40>
 102:	88 36       	cpi	r24, 0x68	; 104
 104:	61 f0       	breq	.+24     	; 0x11e <main+0x4a>
 106:	81 36       	cpi	r24, 0x61	; 97
 108:	99 f4       	brne	.+38     	; 0x130 <main+0x5c>
		{
			case 'a':
			USART0_putString("You pressed an 'a'.\n\r");
 10a:	8b eb       	ldi	r24, 0xBB	; 187
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <USART0_putString>
			break;
 112:	f3 cf       	rjmp	.-26     	; 0xfa <main+0x26>
			case 'b':
			USART0_putString("You pressed an 'b'.\n\r");
 114:	81 ed       	ldi	r24, 0xD1	; 209
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <USART0_putString>
			break;
 11c:	ee cf       	rjmp	.-36     	; 0xfa <main+0x26>
			case 'h':
			USART0_putString("\f");
 11e:	87 ee       	ldi	r24, 0xE7	; 231
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <USART0_putString>
#include <avr/interrupt.h>
#include <util/delay.h>

static inline void mainMenu(void)
{
	USART0_putString("---------------------------\n\r"
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <USART0_putString>
 12e:	e5 cf       	rjmp	.-54     	; 0xfa <main+0x26>
			case 'h':
			USART0_putString("\f");
			mainMenu();
			break;
			default:
			USART0_putString("I don't know what to do with that key.\n\r");
 130:	89 ee       	ldi	r24, 0xE9	; 233
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <USART0_putString>
			break;
 138:	e0 cf       	rjmp	.-64     	; 0xfa <main+0x26>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
