
E3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000011e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000001b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a9  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bf  00000000  00000000  000009f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b9  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c5  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a5  00000000  00000000  0000177d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001822  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
#include "EX_INT.h"

volatile uint8_t counter = 0;
volatile uint8_t max_increment = 4;

ISR(INT0_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	8f e3       	ldi	r24, 0x3F	; 63
  b6:	9c e9       	ldi	r25, 0x9C	; 156
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <__vector_1+0x12>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <__vector_1+0x18>
  be:	00 00       	nop
	_delay_ms(DEBOUNCE_TIME); // Espera para evitar rebotes en el botón
	if (!(READ_PIN(GPIO01_IN, BUTTON))) { // Si el botón está presionado
  c0:	4a 99       	sbic	0x09, 2	; 9
  c2:	0d c0       	rjmp	.+26     	; 0xde <__vector_1+0x38>
		if (counter < max_increment) {
  c4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  cc:	98 17       	cp	r25, r24
  ce:	28 f4       	brcc	.+10     	; 0xda <__vector_1+0x34>
			counter++; // Incrementa el contador solo si está por debajo del límite máximo
  d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		}
		while (!(READ_PIN(GPIO01_IN, BUTTON))); // Espera hasta que se suelte el botón
  da:	4a 9b       	sbis	0x09, 2	; 9
  dc:	fe cf       	rjmp	.-4      	; 0xda <__vector_1+0x34>
	}
}
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <main>:

static inline void GPIO_init()
{
	//static: invisible outside of the file
	//inline: not called, copied into the file calling it instead
		GPI001 |= (1<<DDD4) |  (1<<DDD5) |  (1<<DDD6) |  (1<<DDD7);
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	80 6f       	ori	r24, 0xF0	; 240
  f0:	8a b9       	out	0x0a, r24	; 10
		GPIO_1_OUT |=(1<<BUTTON);
  f2:	5a 9a       	sbi	0x0b, 2	; 11
#define LOW_LEVEL 0 // Decimal value equivalent to ICS01=0 and ICS00=0
#define CHANGE 1 // Decimal value equivalent to ICS01=0 and ICS00=1
#define FALLING 2 // Decimal value equivalent to ICS01=1 and ICS00=0
#define RISING 3 // Decimal value equivalent to ICS01=1 and ICS00=1

static inline void INT0_config (uint8_t typeTrigger)    {EICRA |= typeTrigger;}
  f4:	e9 e6       	ldi	r30, 0x69	; 105
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	80 83       	st	Z, r24

static inline void INT1_config (uint8_t typeTrigger)    {EICRA |= (typeTrigger<<ISC10);}

static inline void INT0_enable()                        {EIMSK |= (1<<INT0);}
  fe:	e8 9a       	sbi	0x1d, 0	; 29

	INT0_config(FALLING); // Configura la interrupción externa INT0 para que se active en flanco descendente

	INT0_enable(); // Habilita la interrupción externa INT0

	sei(); // Habilita las interrupciones globales
 100:	78 94       	sei

	while (1) {
		// Muestra el valor del contador en los LEDs (formato binario)
		GPIO_1_OUT = (GPIO_1_OUT & 0b00001111) | (counter << 4); // Actualiza solo los bits de los LEDs
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 108:	28 2f       	mov	r18, r24
 10a:	2f 70       	andi	r18, 0x0F	; 15
 10c:	30 e1       	ldi	r19, 0x10	; 16
 10e:	93 9f       	mul	r25, r19
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	82 2b       	or	r24, r18
 116:	8b b9       	out	0x0b, r24	; 11
 118:	f4 cf       	rjmp	.-24     	; 0x102 <main+0x16>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
