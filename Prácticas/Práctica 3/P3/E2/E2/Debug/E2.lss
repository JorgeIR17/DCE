
E2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000017c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000074a  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ae  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b3  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038e  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009e  00000000  00000000  0000169e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  88:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
/// pressed, the int interrupt is triggered. Then all the actions
/// written into the ISR are executed. When it finishes, the flag is
/// cleared and the main program continues.
	volatile uint8_t cont = 0;

ISR(INT0_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	///--------------------------------------------------------
	/// 1.- Toggle the red LED
	///--------------------------------------------------------
	cont++;
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(cont > 15)
  aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ae:	80 31       	cpi	r24, 0x10	; 16
  b0:	10 f0       	brcs	.+4      	; 0xb6 <__vector_1+0x26>
		cont = 0;
  b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	81 ee       	ldi	r24, 0xE1	; 225
  ba:	94 e0       	ldi	r25, 0x04	; 4
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <__vector_1+0x2c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <__vector_1+0x36>
  c6:	00 00       	nop
	//--------------------------------------------------------------------
	// 2. To avoid a new interrupt due to a falling edge caused by bouncing
	//--------------------------------------------------------------------
	_delay_ms (100); // Although is not recommended
}
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <main>:

static inline void GPIO_init()
{
	//static: invisible outside of the file
	//inline: not called, copied into the file calling it instead
		GPI001 |= (1<<DDD3) |  (1<<DDD4) |  (1<<DDD5) |  (1<<DDD6);
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	88 67       	ori	r24, 0x78	; 120
  dc:	8a b9       	out	0x0a, r24	; 10
		GPIO_1_OUT |=(1<<BUTTON);
  de:	5a 9a       	sbi	0x0b, 2	; 11
	GPIO_init();

	/// -----------------------------------------------------------
	/// 2.- Configure external interrupt
	/// -----------------------------------------------------------
	EICRA = (1<<ISC01) |(0<<ISC00) | // INT0 is triggered by a falling edge
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	(0<<ISC11) |(0<<ISC10); // INT1 is set as default value (0)
	EIMSK |= (1<<INT0); // Enable the ISR of INT0;
  e6:	e8 9a       	sbi	0x1d, 0	; 29
	/// -----------------------------------------------------------
	/// 3.- Enable global interrupts
	/// -----------------------------------------------------------
	sei(); // Equivalent to SREG |=(1<<I);
  e8:	78 94       	sei
	///------------ LOOP ----------------------------------------
	while (1) {
		/// -----------------------------------------------------------
		/// 1.- Toggle the green LD
		/// -----------------------------------------------------------
		GPIO_1_OUT &= ~(0b111 << PORTD3);  // Clear the bits corresponding to LEDs
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	87 7c       	andi	r24, 0xC7	; 199
  ee:	8b b9       	out	0x0b, r24	; 11
		GPIO_1_OUT &= ~(1 << PORTD6);      // Clear PORTD6 separately
  f0:	5e 98       	cbi	0x0b, 6	; 11
		GPIO_1_OUT |= (cont << PORTD3);     // Set the bits according to the counter value
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f6:	9b b1       	in	r25, 0x0b	; 11
  f8:	88 0f       	add	r24, r24
  fa:	88 0f       	add	r24, r24
  fc:	88 0f       	add	r24, r24
  fe:	89 2b       	or	r24, r25
 100:	8b b9       	out	0x0b, r24	; 11
 102:	f3 cf       	rjmp	.-26     	; 0xea <main+0x12>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
