
E4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000190  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000797  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bf  00000000  00000000  000009bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000307  00000000  00000000  0000107e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b3  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a5  00000000  00000000  00001783  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
#define ODD_OFF 3

volatile uint8_t state = ALL_ON;


ISR(INT0_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	8f e3       	ldi	r24, 0x3F	; 63
  a0:	9c e9       	ldi	r25, 0x9C	; 156
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <__vector_1+0x12>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <__vector_1+0x18>
  a8:	00 00       	nop
	_delay_ms(DEBOUNCE_TIME); // Debounce delay
	if (!(READ_PIN(GPIO01_IN, BUTTON))) { // If the button is pressed
  aa:	4a 99       	sbic	0x09, 2	; 9
  ac:	0d c0       	rjmp	.+26     	; 0xc8 <__vector_1+0x38>
		state++; // Move to the next state
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if (state > ODD_OFF) state = ALL_ON; // Reset if it exceeds the maximum state
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	10 f0       	brcs	.+4      	; 0xc4 <__vector_1+0x34>
  c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		while (!(READ_PIN(GPIO01_IN, BUTTON))); // Wait until the button is released
  c4:	4a 9b       	sbis	0x09, 2	; 9
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <__vector_1+0x34>
	}
}
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <main>:

static inline void GPIO_init()
{
	//static: invisible outside of the file
	//inline: not called, copied into the file calling it instead
		GPI001 |= (1<<DDD4) |  (1<<DDD5) |  (1<<DDD6) |  (1<<DDD7);
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	80 6f       	ori	r24, 0xF0	; 240
  da:	8a b9       	out	0x0a, r24	; 10
		GPIO_1_OUT |=(1<<BUTTON);
  dc:	5a 9a       	sbi	0x0b, 2	; 11
#define LOW_LEVEL 0 // Decimal value equivalent to ICS01=0 and ICS00=0
#define CHANGE 1 // Decimal value equivalent to ICS01=0 and ICS00=1
#define FALLING 2 // Decimal value equivalent to ICS01=1 and ICS00=0
#define RISING 3 // Decimal value equivalent to ICS01=1 and ICS00=1

static inline void INT0_config (uint8_t typeTrigger)    {EICRA |= typeTrigger;}
  de:	e9 e6       	ldi	r30, 0x69	; 105
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	80 83       	st	Z, r24

static inline void INT1_config (uint8_t typeTrigger)    {EICRA |= (typeTrigger<<ISC10);}

static inline void INT0_enable()                        {EIMSK |= (1<<INT0);}
  e8:	e8 9a       	sbi	0x1d, 0	; 29
	GPIO_init();

	INT0_config(FALLING); // Configure external interrupt INT0 for falling edge detection
	INT0_enable(); // Enable external interrupt INT0

	sei(); // Enable global interrupts
  ea:	78 94       	sei
		switch (state) {
			case ALL_ON:
			GPIO_1_OUT = 0b11110100; // Turn on all LEDs (pins 7, 6, 5, 4)
			break;
			case ODD_ON:
			GPIO_1_OUT = 0b10100100; // Turn on odd LEDs (pins 7, 5)
  ec:	44 ea       	ldi	r20, 0xA4	; 164
	sei(); // Enable global interrupts

	while (1) {
		switch (state) {
			case ALL_ON:
			GPIO_1_OUT = 0b11110100; // Turn on all LEDs (pins 7, 6, 5, 4)
  ee:	34 ef       	ldi	r19, 0xF4	; 244
			break;
			case ODD_ON:
			GPIO_1_OUT = 0b10100100; // Turn on odd LEDs (pins 7, 5)
			break;
			case EVEN_ON:
			GPIO_1_OUT = 0b01010100; // Turn on even LEDs (pins 6, 4)
  f0:	24 e5       	ldi	r18, 0x54	; 84
			break;
			case ODD_OFF:
			GPIO_1_OUT = 0b00000100; // Turn off all LEDs
  f2:	94 e0       	ldi	r25, 0x04	; 4
	INT0_enable(); // Enable external interrupt INT0

	sei(); // Enable global interrupts

	while (1) {
		switch (state) {
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	41 f0       	breq	.+16     	; 0x10c <main+0x36>
  fc:	28 f0       	brcs	.+10     	; 0x108 <main+0x32>
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	39 f0       	breq	.+14     	; 0x110 <main+0x3a>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	39 f0       	breq	.+14     	; 0x114 <main+0x3e>
 106:	f6 cf       	rjmp	.-20     	; 0xf4 <main+0x1e>
			case ALL_ON:
			GPIO_1_OUT = 0b11110100; // Turn on all LEDs (pins 7, 6, 5, 4)
 108:	3b b9       	out	0x0b, r19	; 11
			break;
 10a:	f4 cf       	rjmp	.-24     	; 0xf4 <main+0x1e>
			case ODD_ON:
			GPIO_1_OUT = 0b10100100; // Turn on odd LEDs (pins 7, 5)
 10c:	4b b9       	out	0x0b, r20	; 11
			break;
 10e:	f2 cf       	rjmp	.-28     	; 0xf4 <main+0x1e>
			case EVEN_ON:
			GPIO_1_OUT = 0b01010100; // Turn on even LEDs (pins 6, 4)
 110:	2b b9       	out	0x0b, r18	; 11
			break;
 112:	f0 cf       	rjmp	.-32     	; 0xf4 <main+0x1e>
			case ODD_OFF:
			GPIO_1_OUT = 0b00000100; // Turn off all LEDs
 114:	9b b9       	out	0x0b, r25	; 11
			break;
 116:	ee cf       	rjmp	.-36     	; 0xf4 <main+0x1e>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
